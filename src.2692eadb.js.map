{"version":3,"sources":["index.js"],"names":["tasksListElement","document","querySelector","taskElements","querySelectorAll","task","draggable","addEventListener","evt","target","classList","add","remove","getNextElement","cursorPosition","currentElement","currentElementCoord","getBoundingClientRect","nextElement","y","height","nextElementSibling","preventDefault","activeElement","contains","clientY","previousElementSibling","insertBefore"],"mappings":";AAiCA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAjCA,IAiCA,EAjCMA,EAAmBC,SAASC,cAAlC,gBACMC,EAAeH,EAAiBI,iBAAtC,gBAGmBD,EAAAA,EAAAA,GA6BnB,IA7BiC,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAtBE,IAAAA,EAAsB,EAAA,MAC/BA,EAAKC,WAAY,GA4BnB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAxBAN,EAAiBO,iBAA8B,YAAA,SAACC,GAC9CA,EAAIC,OAAOC,UAAUC,IAArB,cAEFX,EAAiBO,iBAA4B,UAAA,SAACC,GAC5CA,EAAIC,OAAOC,UAAUE,OAArB,cAKF,IAAMC,EAAiB,SAACC,EAAgBC,GAEhCC,IAAAA,EAAsBD,EAAeE,wBAUpCC,OAJcJ,EAJQE,EAAoBG,EAAIH,EAAoBI,OAAS,EAK9EL,EACAA,EAAeM,oBAKrBrB,EAAiBO,iBAA6B,WAAA,SAACC,GAE7CA,EAAIc,iBAGEC,IAAAA,EAAgBvB,EAAiBE,cAAvC,aAEMa,EAAiBP,EAAIC,OAQvB,GAJec,IAAkBR,GACnCA,EAAeL,UAAUc,SAD3B,eAII,CAMEN,IAAAA,EAAcL,EAAeL,EAAIiB,QAASV,GAI9CG,GACAK,IAAkBL,EAAYQ,wBAC9BH,IAAkBL,GAOpBlB,EAAiB2B,aAAaJ,EAAeL","file":"src.2692eadb.js","sourceRoot":"..\\src","sourcesContent":["const tasksListElement = document.querySelector(`.tasks__list`);\r\nconst taskElements = tasksListElement.querySelectorAll(`.tasks__item`);\r\n\r\n// Перебираем все элементы списка и присваиваем нужное значение\r\nfor (const task of taskElements) {\r\n  task.draggable = true;\r\n}\r\n\r\n// Отслеживание события dragstart dragend на всем списке для добавления / удаления класса selected\r\ntasksListElement.addEventListener(`dragstart`, (evt) => {\r\n  evt.target.classList.add(`selected`);\r\n})\r\ntasksListElement.addEventListener(`dragend`, (evt) => {\r\n  evt.target.classList.remove(`selected`);\r\n});\r\n\r\n\r\n// для проверки находится ли курсор на центром элемента и нужно ли делать замену\r\nconst getNextElement = (cursorPosition, currentElement) => {\r\n  // Получаем объект с размерами и координатами\r\n  const currentElementCoord = currentElement.getBoundingClientRect();\r\n  // Находим вертикальную координату центра текущего элемента\r\n  const currentElementCenter = currentElementCoord.y + currentElementCoord.height / 2;\r\n\r\n  // Если курсор выше центра элемента, возвращаем текущий элемент\r\n  // В ином случае — следующий DOM-элемент\r\n  const nextElement = (cursorPosition < currentElementCenter) ?\r\n      currentElement :\r\n      currentElement.nextElementSibling;\r\n\r\n  return nextElement;\r\n};\r\n\r\ntasksListElement.addEventListener(`dragover`, (evt) => {\r\n  // Разрешаем сбрасывать элементы в эту область\r\n  evt.preventDefault();\r\n\r\n  // Находим перемещаемый элемент\r\n  const activeElement = tasksListElement.querySelector(`.selected`);\r\n  // Находим элемент, над которым в данный момент находится курсор\r\n  const currentElement = evt.target;\r\n  // Проверяем, что событие сработало:\r\n  // 1. не на том элементе, который мы перемещаем,\r\n  // 2. именно на элементе списка\r\n  const isMoveable = activeElement !== currentElement &&\r\n    currentElement.classList.contains(`tasks__item`);\r\n\r\n  // Если нет, прерываем выполнение функции\r\n  if (!isMoveable) {\r\n    return;\r\n  }\r\n\r\n // evt.clientY — вертикальная координата курсора в момент,\r\n  // когда сработало событие\r\n  const nextElement = getNextElement(evt.clientY, currentElement);\r\n\r\n  // Проверяем, нужно ли менять элементы местами\r\n  if (\r\n    nextElement && \r\n    activeElement === nextElement.previousElementSibling ||\r\n    activeElement === nextElement\r\n  ) {\r\n    // Если нет, выходим из функции, чтобы избежать лишних изменений в DOM\r\n    return;\r\n  }\r\n\r\n  // Вставляем activeElement перед nextElement\r\n  tasksListElement.insertBefore(activeElement, nextElement);\r\n});"]}